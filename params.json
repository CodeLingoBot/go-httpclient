{"name":"go-httpclient","tagline":"a Go HTTP client with timeouts","body":"## go-httpclient\r\n\r\n**requires Go 1.1+** as of `v0.4.0` the API has been completely re-written for Go 1.1 (for a Go\r\n1.0.x compatible release see [1adef50](https://github.com/mreiferson/go-httpclient/tree/1adef50))\r\n\r\n[![Build\r\nStatus](https://secure.travis-ci.org/mreiferson/go-httpclient.png?branch=master)](http://travis-ci.org/mreiferson/go-httpclient)\r\n\r\nProvides an HTTP Transport that implements the `RoundTripper` interface and\r\ncan be used as a built in replacement for the standard library's, providing:\r\n\r\n * connection timeouts\r\n * request timeouts\r\n\r\nThis is a thin wrapper around `http.Transport` that sets dial timeouts and uses\r\nGo's internal timer scheduler to call the Go 1.1+ `CancelRequest()` API.\r\n\r\n### Example\r\n\r\n```go\r\ntransport := &httpclient.Transport{\r\n    ConnectTimeout:        1*time.Second,\r\n    RequestTimeout:        10*time.Second,\r\n    ResponseHeaderTimeout: 5*time.Second,\r\n}\r\ndefer transport.Close()\r\n\r\nclient := &http.Client{Transport: transport}\r\nreq, _ := http.NewRequest(\"GET\", \"http://127.0.0.1/test\", nil)\r\nresp, err := client.Do(req)\r\nif err != nil {\r\n    return err\r\n}\r\ndefer resp.Body.Close()\r\n```\r\n\r\n### Reference Docs\r\n\r\nFor API docs see [godoc](http://godoc.org/github.com/mreiferson/go-httpclient).\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}