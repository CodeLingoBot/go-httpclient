{"google":"","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"go-httpclient","body":"## HttpClient\r\n\r\nHttpClient wraps Go's built in HTTP client providing an API to:\r\n\r\n * set timeouts\r\n    * separate connect timeout\r\n    * *request* based timeout (*not* just read/write deadline)\r\n * easy access to the connection object for a given request\r\n\r\n```go\r\npackage httpclient\r\n\r\ntype HttpClient struct {\r\n    ConnectTimeout   time.Duration\r\n    ReadWriteTimeout time.Duration\r\n    MaxConnsPerHost  int\r\n    RedirectPolicy   func(*http.Request, []*http.Request) error\r\n    TLSClientConfig  *tls.Config\r\n}\r\n\r\nfunc New() *HttpClient\r\n    create a new HttpClient all options should be set on the instance\r\n    returned\r\n\r\nfunc (h *HttpClient) Do(req *http.Request) (*http.Response, error)\r\n    perform the specified request\r\n\r\nfunc (h *HttpClient) FinishRequest(req *http.Request) error\r\n    perform final cleanup for the specified request *must* be called for\r\n    every request performed after processing is finished and after which\r\n    GetConn will no longer return successfully\r\n\r\nfunc (h *HttpClient) Get(url string) (*http.Response, error)\r\n    convenience method to perform a HTTP GET request\r\n\r\nfunc (h *HttpClient) GetConn(req *http.Request) (net.Conn, error)\r\n    returns the connection associated with the specified request cannot be\r\n    called after FinishRequest\r\n\r\nfunc (h *HttpClient) Post(url string, contentType string, body io.Reader) (*http.Response, error)\r\n    convenience method to perform a HTTP POST request\r\n\r\nfunc (h *HttpClient) RoundTrip(req *http.Request) (*http.Response, error)\r\n    satisfies the RoundTripper interface and handles checking the connection\r\n    cache or dialing (with ConnectTimeout)\r\n\r\nfunc DefaultRedirectPolicy(req *http.Request, via []*http.Request) error\r\n    default redirect policy which fails after 3 redirects.\r\n\r\nfunc Version() string\r\n    returns the current version\r\n```\r\n\r\n#### Example\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n    \"httpclient\"\r\n    \"io/ioutil\"\r\n    \"log\"\r\n    \"net/http\"\r\n    \"time\"\r\n)\r\n\r\nfunc main() {\r\n    httpClient := httpclient.New()\r\n    httpClient.ConnectTimeout = time.Second\r\n    httpClient.ReadWriteTimeout = time.Second\r\n\r\n    // Allow insecure HTTPS connections.  Note: the TLSClientConfig pointer can't change\r\n    // places, so you can only modify the existing tls.Config object\r\n\thttpClient.TLSClientConfig.InsecureSkipVerify = true\r\n\r\n    // Make a custom redirect policy to keep track of the number of redirects we've followed\r\n    var numRedirects int\r\n    httpClient.RedirectPolicy = func(r *http.Request, v []*http.Request) error {\r\n        numRedirects += 1\r\n        return DefaultRedirectPolicy(r, v)\r\n    }\r\n\r\n    req, _ := http.NewRequest(\"GET\", \"http://127.0.0.1/test\", nil)\r\n\r\n    resp, err := httpClient.Do(req)\r\n    if err != nil {\r\n        log.Fatalf(\"request failed - %s\", err.Error())\r\n    }\r\n    defer resp.Body.Close()\r\n\r\n    conn, err := httpClient.GetConn(req)\r\n    if err != nil {\r\n        log.Fatalf(\"failed to get conn for req\")\r\n    }\r\n    // do something with conn\r\n\r\n    body, err := ioutil.ReadAll(resp.Body)\r\n    log.Printf(\"%s\", body)\r\n\r\n    httpClient.FinishRequest(req)\r\n}\r\n```\r\n","tagline":"a Go HTTP client with timeouts"}